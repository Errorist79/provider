services:
  # ============================================================================
  # Kong Gateway + Database
  # ============================================================================
  kong-database:
    image: postgres:15
    container_name: kong-database
    environment:
      POSTGRES_USER: ${KONG_DB_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong}
      POSTGRES_DB: ${KONG_DB_NAME:-kong}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KONG_DB_USER:-kong} -d ${KONG_DB_NAME:-kong}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - rpc-gateway-net
    restart: unless-stopped

  kong-migrations:
    image: kong:${KONG_VERSION:-3.6}
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_DB_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong}
      KONG_PG_DATABASE: ${KONG_DB_NAME:-kong}
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - rpc-gateway-net

  kong:
    image: kong:${KONG_VERSION:-3.6}
    container_name: kong
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_DB_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong}
      KONG_PG_DATABASE: ${KONG_DB_NAME:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_STATUS_LISTEN: 0.0.0.0:8100
      KONG_ADMIN_GUI_AUTH: basic-auth
      KONG_ADMIN_GUI_SESSION_CONF: '{"secret":"${KONG_ADMIN_SESSION_SECRET:-secret}","storage":"kong","cookie_secure":false}'
      # OpenTelemetry configuration
      KONG_TRACING_INSTRUMENTATIONS: all
      KONG_TRACING_SAMPLING_RATE: ${KONG_TRACING_RATE:-1.0}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"      # Proxy HTTP
      - "${KONG_ADMIN_PORT:-8001}:8001"      # Admin API
      - "${KONG_MANAGER_PORT:-8002}:8002"    # Kong Manager
      - "${KONG_STATUS_PORT:-8100}:8100"     # Status/metrics
      - "${KONG_PROXY_SSL_PORT:-8443}:8443"  # Proxy HTTPS
      - "${KONG_ADMIN_SSL_PORT:-8444}:8444"  # Admin API HTTPS
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - rpc-gateway-net
    restart: unless-stopped

  # ============================================================================
  # Application Database (PostgreSQL)
  # ============================================================================
  app-database:
    image: postgres:${POSTGRES_VERSION:-15}
    container_name: app-database
    environment:
      POSTGRES_USER: ${APP_DB_USER:-rpcuser}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD:-rpcpass}
      POSTGRES_DB: ${APP_DB_NAME:-rpc_gateway}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_DB_USER:-rpcuser} -d ${APP_DB_NAME:-rpc_gateway}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - app_data:/var/lib/postgresql/data
      - ./database/postgresql/init:/docker-entrypoint-initdb.d
    ports:
      - "${APP_DB_PORT:-5432}:5432"
    networks:
      - rpc-gateway-net
    restart: unless-stopped

  # ============================================================================
  # Redis Cache
  # ============================================================================
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: redis-cache
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass} --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - rpc-gateway-net
    restart: unless-stopped

  # ============================================================================
  # ClickHouse (for telemetry and analytics)
  # ============================================================================
  clickhouse:
    image: clickhouse/clickhouse-server:${CLICKHOUSE_VERSION:-23.8-alpine}
    container_name: clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-telemetry}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "127.0.0.1:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse/init:/docker-entrypoint-initdb.d
      - ./config/clickhouse/config.d:/etc/clickhouse-server/config.d
      - ./certs/clickhouse:/etc/clickhouse-server/certs:ro
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_NATIVE_PORT:-9000}:9000"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # ============================================================================
  # Monitoring Stack
  # ============================================================================
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      - kong

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_INSTALL_PLUGINS: ${GRAFANA_PLUGINS:-grafana-clickhouse-datasource}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      - prometheus
      - clickhouse

  # ============================================================================
  # Unkey (Self-hosted API key management)
  # https://github.com/unkeyed/unkey
  # ============================================================================
  unkey:
    image: ghcr.io/unkeyed/unkey:${UNKEY_VERSION:-v2.0.28}
    container_name: unkey
    command: ["run"]
    environment:
      # Database connection
      DATABASE_HOST: app-database
      DATABASE_USERNAME: ${APP_DB_USER:-rpcuser}
      DATABASE_PASSWORD: ${APP_DB_PASSWORD:-rpcpass}
      DATABASE_NAME: ${APP_DB_NAME:-rpc_gateway}

      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}

      # Unkey configuration
      UNKEY_API_URL: ${UNKEY_BASE_URL:-http://localhost:3001}
      UNKEY_ROOT_KEY: ${UNKEY_ROOT_KEY:-unkey_root_change_me_in_production}

      # Optional: Disable telemetry for self-hosted
      UNKEY_DISABLE_TELEMETRY: "true"
    ports:
      - "${UNKEY_PORT:-3001}:8080"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      app-database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8080/api/v1/liveness"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # OpenTelemetry Collector (for SigNoz)
  # ============================================================================
  otel-collector:
    image: signoz/signoz-otel-collector:${SIGNOZ_VERSION:-0.88.11}
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=rpc-gateway
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy

  # ============================================================================
  # SigNoz Query Service
  # ============================================================================
  signoz-query-service:
    image: signoz/query-service:${SIGNOZ_VERSION:-0.38.0}
    container_name: signoz-query-service
    command: ["-config=/root/config/prometheus.yml"]
    volumes:
      - ./monitoring/signoz/prometheus.yml:/root/config/prometheus.yml
      - signoz_data:/var/lib/signoz
    environment:
      - ClickHouseUrl=tcp://clickhouse:9000
      - STORAGE=clickhouse
      - GODEBUG=netdns=go
      - TELEMETRY_ENABLED=false
    ports:
      - "8080:8080"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      otel-collector:
        condition: service_started

  # ============================================================================
  # SigNoz Frontend
  # ============================================================================
  signoz-frontend:
    image: signoz/frontend:${SIGNOZ_VERSION:-0.38.0}
    container_name: signoz-frontend
    environment:
      - FRONTEND_API_ENDPOINT=http://signoz-query-service:8080
    ports:
      - "${SIGNOZ_PORT:-3301}:3301"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      - signoz-query-service

  # ============================================================================
  # Reporting API (Usage Analytics & Metrics)
  # ============================================================================
  reporting-api:
    build:
      context: ./services/reporting-api
      dockerfile: Dockerfile
    container_name: reporting-api
    environment:
      # Server configuration
      REPORTING_API_SERVER_PORT: "8080"
      REPORTING_API_SERVER_ENVIRONMENT: ${ENVIRONMENT:-development}

      # ClickHouse connection
      REPORTING_API_CLICKHOUSE_HOST: clickhouse
      REPORTING_API_CLICKHOUSE_PORT: 9000
      REPORTING_API_CLICKHOUSE_DATABASE: ${CLICKHOUSE_DB:-telemetry}
      REPORTING_API_CLICKHOUSE_USERNAME: ${CLICKHOUSE_USER:-clickhouse}
      REPORTING_API_CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}

      # PostgreSQL connection
      REPORTING_API_POSTGRESQL_HOST: app-database
      REPORTING_API_POSTGRESQL_PORT: 5432
      REPORTING_API_POSTGRESQL_DATABASE: ${APP_DB_NAME:-rpc_gateway}
      REPORTING_API_POSTGRESQL_USERNAME: ${APP_DB_USER:-rpcuser}
      REPORTING_API_POSTGRESQL_PASSWORD: ${APP_DB_PASSWORD:-rpcpass}
      REPORTING_API_POSTGRESQL_SSLMODE: disable

      # Authentication (Phase 6: Simple API key, Phase 7+: Unkey integration)
      REPORTING_API_AUTH_ENABLED: ${REPORTING_API_AUTH_ENABLED:-false}
      REPORTING_API_AUTH_ADMINAPIKEY: ${REPORTING_API_ADMIN_KEY:-change_me_in_production}

      # Logging
      REPORTING_API_LOGGING_LEVEL: ${LOG_LEVEL:-info}
      REPORTING_API_LOGGING_FORMAT: json
    ports:
      - "${REPORTING_API_PORT:-4000}:8080"
    networks:
      - rpc-gateway-net
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      app-database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8080/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  rpc-gateway-net:
    driver: bridge
    name: rpc-gateway-net

volumes:
  kong_data:
  app_data:
  redis_data:
  clickhouse_data:
  prometheus_data:
  grafana_data:
  signoz_data:
